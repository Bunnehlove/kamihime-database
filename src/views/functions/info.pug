mixin name
  a #{name}#{name.slice(-1) === 's' ? '\'' : '\'s'} Info

mixin stats
  - const wikiURL = 'https://kamihime-project.wikia.com/w/';

  thead
    tr
      th(scope='col') Name
      th(scope='col') #{wiki.rarity ? 'Rarity' : 'Tier'}
      - if (wiki.type)
        th(scope='col') Type
      - if (wiki.element)
        th(scope='col') Element
      - if (wiki.hpMin)
        th(scope='col') HP | ATK | TTL

  tbody
    tr
      td(class='name') <a href="#{wikiURL}#{wiki.name}"" target='_blank'>#{wiki.name}</a>
      td #{wiki.rarity ? wiki.rarity : wiki.tier}
      - if (wiki.type)
        td #{wiki.type}
      - if (wiki.element)
        td #{wiki.element}
      - if (wiki.hpMin)
        td #{wiki.hpMax} | #{wiki.atkMax} | #{parseInt(wiki.atkMax) + parseInt(wiki.hpMax)}

  thead
    tr
      - if (wiki.favouriteWeapon)
        th(scope='col') Favourite Weapon
      - if (wiki.weapon1)
        th(scope='col') Can Wield
      - if (wiki.masterBonus)
        th(scope='col') Master Bonus
      - if (wiki.releaseWeapon)
        th(scope='col') Release Weapon
      - if (wiki.obtained)
        th(scope='col') Obtainable From
      - if (wiki.soul1 || wiki.soulP)
        th(scope='col') Requires

  tbody
    tr
      - if (wiki.favouriteWeapon)
        td #{wiki.favouriteWeapon}
      - if (wiki.weapon1)
        td !{`<b>${wiki.weapon1}</b>${wiki.weapon2 ? ` and <b>${wiki.weapon2}</b>` : ''}`}
      - if (wiki.masterBonus)
        td #{wiki.masterBonus}
      - if (wiki.releaseWeapon)
        td(class='name') <a href="#{wikiURL}#{wiki.releaseWeapon}" target='__blank'>#{wiki.releaseWeapon}</a>
      - if (wiki.obtained)
        - wiki.obtained = wiki.obtained.replace(/\n/g, '<br>');

        td(class='name')
          - if (wiki.obtained.includes('Awaken'))
            - const n = wiki.name.split(' ')[0];
            | Awaken 
            a(href=wikiURL + n, target='__blank') #{n}
          - else
            | !{wiki.obtained}
      - if (wiki.soul1 || wiki.soulP)
        td(class='name')
          a(href=wikiURL + wiki.soul1, target='__blank') #{wiki.soul1}
          - if (wiki.soul2)
            br
            a(href=wikiURL + wiki.soul2, target='__blank') #{wiki.soul2}
          - if (wiki.soulP)
            - if(wiki.soul1)
              br
            | #{wiki.soulP}

mixin kit(type, name, desc, upDesc, cd, dur)
  - if (name)
    tr
      td
        sup
          case type
            when 0
              | #{wiki.type ? 'BURST' : 'SUMMON'}
            when 1
              | #{wiki.type ? 'ABILITY' : 'EFFECT'}
            when 2
              | ASSIST
      td
        case type
          when 0
            div(class='kit-name kit-name-bst') #{name}
          when 1
            div(class='kit-name kit-name-abl') #{name}
          when 2
            div(class='kit-name kit-name-ex') #{name}
        p
          - if (desc)
            | #{desc.replace(/'/g, '')}
          - if (upDesc)
            br
            |   !{upDesc}
      - if (cd)
        td
            span <b>Cooldown</b>: #{cd}
            - if (dur)
              br
              span <b>Duration</b>: #{dur}

-
  // -- From Eros Struct... too lazy to rewrite for pug version lul
  const burstDescParse = () => {
    switch (wiki.rarity) {
      default:
        return `${wiki.element} DMG (5.5x Burst DMG)`;
      case 'SSR':
        return `${wiki.element} DMG (4.5x Burst DMG)`;
      case 'SR':
        return `${wiki.element} DMG (3x Burst DMG)`;
      case 'R':
        return `${wiki.element} DMG (2x Burst DMG)`;
    }
  };
  const burstUpgradeParse = () => {
    return (
      wiki.rarity === 'SSR+'
        ? null
        : wiki.rarity === 'SSR'
          ? ` <b>★ [LB ★★★☆]</b>: ${wiki.burstPowerupDesc ? wiki.burstPowerupDesc : 'Increases to 5x Burst DMG'}`
          : wiki.rarity === 'SR'
            ? ` <b>★ [LB ★★★☆]</b>: ${wiki.burstPowerupDesc ? wiki.burstPowerupDesc : 'Increases to 3.5x Burst DMG'}`
            : wiki.rarity === 'R'
              ? ` <b>★ [LB ★★☆]</b>: ${wiki.burstPowerupDesc ? wiki.burstPowerupDesc : 'Increases to 2.5x Burst DMG'}`
              : null
    );
  };
  const abilityDescParse = (desc, ability) => {
    if (wiki.tier)
      switch (wiki.tier) {
        default:
          return null;
        case 'Standard':
          switch (ability) {
            default:
              return null;
            case 2:
              return ' <b>★ [LV 5]</b>';
          }
        case 'Elite':
        case 'Legendary':
          switch (ability) {
            default:
              return null;
            case 2:
              return ' <b>★ [LV 5]</b>';
            case 3:
              return ' <b>★ [LV 15]</b>';
          }
      }

    if (wiki.rarity)
      switch (wiki.rarity) {
        default:
          switch (ability) {
            default:
              return ` <b>★ [LV 65]</b>: ${desc}`;
            case 2:
              return ` <b>★ [LV 75]</b>: ${desc}`;
            case 3:
              return ` <b>★ [LV 45]</b>: ${desc}`;
            case 4:
              return ` <b>★ [LV 55]</b>: ${desc}`;
          }
        case 'SSR':
          switch (ability) {
            default:
              return ` <b>★ [LV 55]</b>: ${desc}`;
            case 2:
              return ` <b>★ [LV 75]</b>: ${desc}`;
            case 3:
              return ' <b>★ [LV 45]</b>';
          }
        case 'SR':
          switch (ability) {
            default:
              return ` <b>★ [LV 45]</b>: ${desc}`;
            case 2:
              return ` <b>★ [LV 65]</b>: ${desc}`;
            case 3:
              return ' <b>★ [LV 35]</b>';
          }
        case 'R':
          switch (ability) {
            default:
              return ` <b>★ [LV 45]</b>: ${desc}`;
            case 2:
              return ' <b>★ [LV 25]</b>';
          }
      }
  };